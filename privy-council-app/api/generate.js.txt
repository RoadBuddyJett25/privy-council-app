// This is your new backend function: /api/generate.js

export default async function handler(req, res) {
  // 1. We only allow POST requests
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  // 2. Get the prompt and schema from the request body sent by the frontend
  const { fullPrompt, jsonSchema } = req.body;

  // 3. Securely get the API key from Vercel's environment variables
  const apiKey = process.env.GEMINI_API_KEY;

  if (!apiKey) {
    return res.status(500).json({ message: 'API key not found.' });
  }

  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

  // 4. Prepare the payload to send to Google's API
  const payload = {
    contents: [{ role: 'user', parts: [{ text: fullPrompt }] }],
    generationConfig: {
      responseMimeType: 'application/json',
      responseSchema: jsonSchema,
    },
  };

  // 5. Make the fetch request to Google and send the response back to the frontend
  try {
    const googleResponse = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });

    const data = await googleResponse.json();

    if (!googleResponse.ok) {
      console.error('Google API Error:', data);
      throw new Error(data.error?.message || 'Failed to fetch from Google AI');
    }

    res.status(200).json(data);
  } catch (error) {
    console.error('Internal Server Error:', error);
    res.status(500).json({ message: error.message });
  }
}
